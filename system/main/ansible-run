#!/usr/bin/env python

import socket
import argparse
import sys
import logging
import pathlib
import subprocess
import yaml

logging.basicConfig(format="%(levelname)s: %(message)s")
log = logging.getLogger(__name__)
log.setLevel(logging.INFO)
_PATH_PROFILES = "profiles.yml"
_PATH_CONFIG = "config.yml"
_PATH_VAULT_PASS_FILE = "vault_pass.sh"
_ARGS_TYPES = ["playbook", "profile"]
_MAIN_FILES = ["main.yml", "main_vault.yml"]


def error_exit(message, *args):
    log.error(message, *args)
    sys.exit(1)


def flatten(x):
    """
    Helper to flatten the multi-dimensional list to 1d.
    """
    for xi in x:
        if isinstance(xi, (list, tuple)):
            yield from flatten(xi)
        else:
            yield xi


class AnsibleRun:

    _parser = None
    _playbooks = None
    _profiles = None
    _args = None
    _playbook_main_vault = False

    def main(self):
        try:
            self.run()
        except:
            print("")
            self._parser.print_help()
            sys.exit(1)

    def run(self):
        self.parse_args()
        if self._args.type not in _ARGS_TYPES:
            error_exit("type must be one of: %r", _ARGS_TYPES)

        if self._args.type == "playbook":
            self._playbooks = self.read_playbooks()
            self.validate_playbook_type()
            self.print_info_args()
            playbook_main_file = self.get_playbook_main_file()
            self.run_playbook(playbook_main_file)

        if self._args.type == "profile":
            self._profiles = self.read_profiles()
            self.validate_profile_type()
            self.print_info_args()
            self.detect_playbooks_from_profiles()

    def get_playbook_main_file(self):
        for playbook in self._playbooks:
            if playbook.name == self._args.name:
                folder = playbook.iterdir()
                main_file_paths = []
                for file in folder:
                    if file.name in _MAIN_FILES:
                        main_file_paths.append(file.name)

                    if file.name.endswith("_vault.yml"):
                        self._playbook_main_vault = True

                if len(main_file_paths) == 0:
                    error_exit(
                        "playbook not having main file: playbook=%r", self._args.name
                    )

                if len(main_file_paths) > 1:
                    error_exit(
                        "playbook has multiple main files: main_file=%r",
                        main_file_paths,
                    )

                main_file_path = main_file_paths[0]
                main_file = playbook.joinpath(main_file_path)
                log.info("playbook found: %r", str(main_file))
                return main_file

    def detect_playbooks_from_profiles(self):
        """
        Detects the name of the playbooks from the profiles file.
        Profiles file includes playbooks and tags. For example:

        - p1
        - p2.t1
        - p2.t2.t3
        - p3.t1

        will give:

        p1, p2, p3

        playbooks.
        """
        profile = self._profiles[self._args.name]
        playbooks = frozenset([p.split(".")[0] for p in profile])
        return playbooks

    def create_main_playbook_file(self):
        pass

    def run_playbook(self, playbook_main_file):
        cmd = [
            "ansible-playbook",
            "-v",
            "--inventory-file",
            "localhost.inventory",
            f"--extra-vars=@{_PATH_CONFIG}",
            "--ask-become-pass",
        ]
        log.info("ðŸ”´ will ask the become (sudo) pass")
        if self._playbook_main_vault:
            log.info("ðŸ”‘ vault file detected, will ask the key")
            cmd.append(f"--vault-password-file={_PATH_VAULT_PASS_FILE}")
        if self._args.tags:
            cmd.append(f"--tags='{self._args.tags}'")
        # file path should be the last argument
        main_path = str(playbook_main_file)
        cmd.append(main_path)
        log.info("running playbook: %r", " ".join(cmd))
        subprocess.run(cmd, check=True)

    def validate_playbook_type(self):
        if not self._args.name:
            error_exit("provide a playbook name.")
        playbook_list = [p.name for p in self._playbooks]
        if self._args.name not in playbook_list:
            error_exit("%r not found in playbook directory", self._args.name)

    def validate_profile_type(self):
        if not self._args.name:
            error_exit("provide a profile name.")
        if self._args.tags:
            error_exit("cannot use --tags with profile")
        if self._args.name not in self._profiles.keys():
            error_exit("%r not found in exported profiles", self._args.name)

        self.validate_profile_hostname(self._args.name)

    @staticmethod
    def validate_profile_hostname(profile):
        hostname = socket.getfqdn()
        if profile != hostname:
            error_exit(
                "profile not matching hostname: profile=%r hostname=%r",
                profile,
                hostname,
            )

    def print_info_args(self):
        log.info(
            "ansible-run called with: %r",
            {k: v for k, v in vars(self._args).items() if v is not None},
        )

    @staticmethod
    def read_profiles():
        with open(_PATH_PROFILES, mode="r", encoding="utf-8") as stream:
            profiles = yaml.safe_load(stream)
        exported = profiles["export"]
        for key, value in exported.items():
            flat = list(flatten(value))
            exported[key] = flat
        return exported

    @staticmethod
    def read_playbooks():
        return [d for d in pathlib.Path("playbooks").iterdir() if d.is_dir()]

    def parse_args(self):
        parser = argparse.ArgumentParser(
            prog="ansible-run",
            description="",
        )
        parser.add_argument(
            "type", nargs="?", help=f"type of: {', '.join(_ARGS_TYPES)}"
        )
        parser.add_argument("name", nargs="?", help="name of the type")
        parser.add_argument(
            "--tags",
            nargs="?",
            help=f"optional types, only to be used with '{_ARGS_TYPES[_ARGS_TYPES.index('playbook')]}'",
        )

        args = parser.parse_args()

        self._parser = parser
        self._args = args


if __name__ == "__main__":
    AnsibleRun().main()
