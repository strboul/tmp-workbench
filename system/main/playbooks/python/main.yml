# Manage Python with pyenv
#
# Reference:
#   https://github.com/pyenv/pyenv/blob/master/COMMANDS.md
#
# See the available versions
#   pyenv versions
#
# Install a version
#   pyenv install 3.10
#
# Set global version
#   pyenv global 3.10
#
# Set local version
# (This command creates a .python-version file in
# your current directory. If you have pyenv active
# in your environment, this file will automatically
# activate this version for you.)
#   pyenv local 3.10
#
# Temporarily set version
# (To quickly test, this command activates the version specified by setting the
# PYENV_VERSION environment variable.)
#   pyenv shell 2.7.18
#
- name: Setup Python
  hosts: all
  tags: python
  tasks:
    - name: Ensure system Python is installed
      ansible.builtin.stat:
        path: /usr/bin/python

    - name: Ensure pip is ready
      command: /usr/bin/python -m ensurepip --upgrade
      changed_when: false

    - name: Install pyenv
      community.general.pacman: name="{{ config.packages.pacman.pyenv }}" state=present
      become: true

    - name: Add pyenv to profiles
      ansible.builtin.blockinfile:
        path: "{{ item }}"
        marker: "# {mark} ANSIBLE MANAGED BLOCK: pyenv"
        block: |
          typeset -U path PATH
          path=($HOME/.pyenv/bin $path)
          export PATH
          eval "$(pyenv init --path)"
          eval "$(pyenv init -)"
        mode: 0644
        create: true
        state: present
      loop:
        - "{{ ansible_env.HOME }}/.zshenv"

    - name: Install pyenv versions
      ansible.builtin.command:
        argv:
          - pyenv
          - install
          - -v
          - "{{ item }}"
          - --skip-existing
        creates: "{{ ansible_env.HOME }}/.pyenv/versions/{{ item }}"
      loop:
        - "2.7.18"  # last release of Python 2
        - "3.8-dev"
        - "3.9-dev"
        - "3.10-dev"
      register: pyenv_install
      notify: Set default pyenv version

  handlers:
    # Set the highest Python version as global initially.
    - name: Set default pyenv version
      ansible.builtin.shell: |
        version="$(pyenv versions |
          sed '/.*system.*/d' |
          sort -r --version-sort |
          head -n 1 |
          grep -Eo '[0-9]\.[0-9]+(\.[0-9]+|\-dev)?' |
          xargs)"
        pyenv global "$version"
      changed_when: false
